# Based on https://github.com/changesets/changesets/discussions/1230

name: Publish

on:
  push:
    branches: ["master"]

env:
  CI: true
  REGISTRY: ghcr.io

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  # Update package versions and create GitHub releases with `changesets`.
  #
  # May just create a Pull Request, but if it does `outputs.published` will
  # be false and so the `publish-docker` job will be skipped.
  version:
    name: Release Changesets
    runs-on: ubuntu-latest
    outputs:
      # Boolean
      published: ${{ steps.changesets.outputs.published }}
      # format: [{"name": "@xx/xx", "version": "1.2.0"}, {"name": "@xx/xy", "version": "0.8.9"}]
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install development dependencies
        run: pnpm install --frozen-lockfile --dev

      - name: Create and publish versions
        id: changesets
        uses: changesets/action@v1
        with:
          publish: "pnpm changeset publish"
          commit: "chore: update versions"
          title: "chore: update versions"
        env:
          GITHUB_TOKEN: ${{ secrets.PIEMOT_PAT }}

  publish-docker:
    name: Publish Docker Images
    needs: version
    if: needs.version.outputs.published == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        package: ${{ fromJson(needs.version.outputs.publishedPackages) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Match package name
        uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ matrix.package.name }}
          regex: '@activityrank\/([a-z-]+)'

      - name: Set PACKAGE env variable
        run: echo "PACKAGE=${{ steps.regex-match.outputs.group1 }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: env.PACKAGE == 'api' || env.PACKAGE == 'bot'

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        if: env.PACKAGE == 'api' || env.PACKAGE == 'bot'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        if: env.PACKAGE == 'api' || env.PACKAGE == 'bot'
        with:
          images: ${{ env.REGISTRY }}/rapha01/activityrank/${{ env.PACKAGE }}
          tags: |
            type=semver,pattern={{major}},value=${{ matrix.package.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ matrix.package.version }}
            type=semver,pattern={{version}},value=${{ matrix.package.version }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        if: env.PACKAGE == 'api' || env.PACKAGE == 'bot'
        with:
          context: .
          file: ./apps/${{ env.PACKAGE }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
